AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFront Distribution with choice of new or existing S3 bucket and mandatory existing ALB

Parameters:
  OriginType:
    Type: String
    Description: Choose the origin type for the CloudFront distribution
    AllowedValues: ["NewS3Bucket", "ExistingS3Bucket"]
    Default: "NewS3Bucket"

  NewS3BucketName:
    Type: String
    Description: The name of the S3 bucket to create
    ConstraintDescription: "Bucket name must be all lowercase, alphanumeric and it should be unique (domain name)"

  ExistingS3BucketName:
    Type: String
    Description: Enter the name of the existing S3 bucket
    ConstraintDescription: "The name must be a valid S3 bucket name"

  ExistingALBDomainName:
    Type: String
    Description: Enter the domain name of the existing ALB

  EnableWAF:
    Type: String
    Description: Enable or disable Web Application Firewall (WAF)
    AllowedValues: ["Yes", "No"]
    Default: "No"

Conditions:
  UseNewS3Bucket: !Equals [!Ref OriginType, "NewS3Bucket"]
  UseExistingS3Bucket: !Equals [!Ref OriginType, "ExistingS3Bucket"]
  EnableWAFCondition: !Equals [!Ref EnableWAF, "Yes"]

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: UseNewS3Bucket
    Properties:
      BucketName: !Ref NewS3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: UseNewS3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for S3 bucket

  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Condition: EnableWAFCondition
    Properties:
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        - Name: BadBotControl
          Priority: 0
          Action:
            Block: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesBotControlRuleSet
        - Name: BlacklistRule
          Priority: 1
          Action:
            Block: {}
          Statement:
            IPSetReferenceStatement:
              Arn: !Ref BlacklistIPSet
        - Name: WhitelistRule
          Priority: 2
          Action:
            Allow: {}
          Statement:
            IPSetReferenceStatement:
              Arn: !Ref WhitelistIPSet
        - Name: XSSRule
          Priority: 3
          Action:
            Block: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet

  BlacklistIPSet:
    Type: AWS::WAFv2::IPSet
    Condition: EnableWAFCondition
    Properties:
      Scope: CLOUDFRONT
      Addresses:
        - 203.0.113.0/24
      IPAddressVersion: IPV4

  WhitelistIPSet:
    Type: AWS::WAFv2::IPSet
    Condition: EnableWAFCondition
    Properties:
      Scope: CLOUDFRONT
      Addresses:
        - 192.0.2.0/24
      IPAddressVersion: IPV4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - !If
            - UseNewS3Bucket
            - Id: S3Origin
              DomainName: !GetAtt S3Bucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
            - !If
              - UseExistingS3Bucket
              - Id: S3Origin
                DomainName: !Sub "${ExistingS3BucketName}.s3.amazonaws.com"
                S3OriginConfig: {}
              - Id: ALBOrigin
                DomainName: !Ref ExistingALBDomainName
                CustomOriginConfig:
                  HTTPPort: 80
                  HTTPSPort: 443
                  OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId:
            !If [
              UseNewS3Bucket,
              S3Origin,
              !If [UseExistingS3Bucket, S3Origin, ALBOrigin],
            ]
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        WebACLId: !If [EnableWAFCondition, !Ref WAFWebACL, !Ref "AWS::NoValue"]

Outputs:
  S3BucketName:
    Value: !If [UseNewS3Bucket, !Ref S3Bucket, !Ref ExistingS3BucketName]
    Export:
      Name: S3BucketName

  CloudFrontDistributionId:
    Value: !Ref CloudFrontDistribution
    Export:
      Name: CloudFrontDistributionId
